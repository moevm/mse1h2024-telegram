version: '3'

services:
  backend:
    container_name: mse-telegram-backend
    build: backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - backend-net
      - frontend-net

  frontend:
    container_name: mse-telegram-frontend
    build:
      context: frontend
      target: deploy
      args:
        - "VITE_TELEGRAM_BOT_NAME=${VITE_TELEGRAM_BOT_NAME}"
        - "VITE_BACKEND_URL=${VITE_BACKEND_URL}"
    env_file:
      - .env
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - backend-net
      - frontend-net

  telegram_bot:
    container_name: mse-telegram-bot
    build: telegram_bot
    env_file:
      - .env
    depends_on:
      - database
      - backend
      - rabbitmq
    networks:
      - backend-net
    
  database:
    container_name: mse-telegram-mongodb
    image: mongo:7.0.7
    hostname: mongodb
    env_file:
      - .env
    ports:
      - "27017:27017"
    environment:
      - "MONGO_INITDB_DATABASE=${MONGO_DB}"
      - "MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}"
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}"
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "localhost:27017/test", "--quiet"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    command: mongod --quiet
    networks:
      - backend-net

  rabbitmq:
    container_name: mse-telegram-rabbitmq
    image: rabbitmq:3.13.0
    hostname: rabbit
    env_file:
      - .env
    environment:
      - "RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}"
      - "RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}"
      - "RABBITMQ_DEFAULT_VHOST=/"
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    command: bash -c "rabbitmq-server;"
    networks:
      - backend-net

volumes:
  mongodb-data:
  mongodb-config:
  rabbitmq-data:

networks:
  frontend-net:
  backend-net: